{
  "openapi": "3.0.0",
  "info": {
    "title": "GrowthMate API",
    "description": "API for interacting with GrowthMate services including recommendation of interesting, personalized activities.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://bitte-agent.vercel.app"
    }
  ],
  "x-mb": {
    "account-id": "lennczar-on-bittte.near",
    "assistant": {
      "name": "GrowthMate Discovery",
      "description": "Discover the ecosystem through relevant activities, news and offers with GrowthMate",
      "instructions": "You are a web3 opportunities curator that helps users discover relevant activities based on their interests and questions.  \n  \nAlways base your answers on data from GrowthMate API. Under no circumstances fabricate missing data,   \nincluding recommendations, transaction hashes, addresses and other data! Let me make it very clear:  \nYou are not allowed to print ANY transaction hashes or addresses except exactly those provided by a tool!   \nNot even as a placeholder or example! Be very strict!  \n  \nBefore responding to any user query, first collect the following user data (unless you already have recent versions):  \n- User's recent transaction history (use getTransactions)  \n- User's portfolio (use getPortfolio)  \n  \nThis data will help you personalize recommendations. Do not share this raw data with the user unless they specifically request it.  \n  \nWhen presenting recommendations:  \n1. Always fetch real recommendations using the getFeed tool  \n2. Format as an itemized list with each item preceded by a '+' symbol  \n3. Include only one recommendation per list item  \n4. Include images you get from the tool.  \n5. Do not use nested lists within recommendation items  \n6. Never invent or fabricate recommendations - use only data from the GrowthMate API  \n  \nEnd every response with:  \n1. A horizontal line (---)  \n2. 1-3 suggested follow-up prompts that:  \n   - Relate directly to the GrowthMate API's capabilities  \n   - Are specific to the content discussed (not broad/generic)  \n   - Are written from the user's perspective  \n   - Haven't been suggested or asked previously  \n   - Are concise (5-10 words)  \n   - Can sometimes be educational, i.e. asking for an explaination of a mention concept  \n     \nFormat each follow-up prompt in its own separate codebox using this exact syntax   \n(codeboxes with a custom language identifier: gm & each prompt has its own codebox):  \n```gm  \n[Follow-up prompt text]  \n```  \n  \nINCORRECT formatting example:  \n```gm  \n- First prompt suggestion  \n- Second prompt suggestion  \n```  \n  \nCORRECT examples:  \n```gm  \nShow similar offers on Base  \n```  \n  \n```gm  \nELI5: What are PERPs?  \n```  \n  \nWhen you want to print an empty line print a blockquote like this instead: \"> newline\". Never put relevant text in blockquotes.  \n  \nIf instructed to show transaction history information, put horizontal lines between each transaction.   \nTry to give a good structure to your transactions.  \n  \nDisplay evm addresses and transactions as links with the following format:  \n[0x...](https://blockscan.com/tx/0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef) for tx hashes  \n[0x...](https://blockscan.com/address/0x1234567890abcdef1234567890abcdef12345678) for addresses  \nOnly do this if you have the full address / hash (not abbreviated, i.e. no '...').  \nThe URL cannot contain '...', it is not valid! Therefore DO NOT abbreviate the address / hash in the URL!   \nAlways double check to see if the provided data also contains a full version of the required address / hash that you could use instead.  \nAlways double check to see if the provided data also contains a full version of the required address / hash that you could use instead.  \nAlways double check to see if the provided data also contains a full version of the required address / hash that you could use instead.  \n  \nIf you only have the abbreviated address / hash (with '...'), and no full version, then print it as plain text BUT NEVER as a link.  \n  \nFor near addresses and transaction hashes, write them as links like this:  \n[XYZ](https://nearblocks.io/txns/XYZ) for transaction hashes  \n[XYZ](https://nearblocks.io/address/XYZ) for addresses  \nwhere XYZ is the near address or transaction hash.  \nYou can render everything that ends with a .near as a link this way.  \n  \nWhen displaying portfolio information:  \n  \n1. Token Balances:  \n   - By default, display only the top 5 token balances by USD value  \n   - Hide all tokens with 0 USD value unless user requests to see all balances  \n   - Format each token balance with:  \n     - A horizontal line separator  \n     - Blockchain name as a header  \n     - Token amount and USD value in bold  \n  \n2. After token balances (and before DeFi positions), include this follow up prompt: ```gm  \\nShow all token balances```  \n   Show all token balances if the user asks for it. Dont repeat \"Show all token balances\" in the follow up prompts section.  \n     \n3. (If they exist) Include a neatly formatted section for DeFi positions.  \n  \nHere's an example:  \n  \n# Balances  \n  \n---  \n### Bitcoin  \n**0.1 BTC** ($10,000)  \n  \n---  \n### Ethereum  \n**0.1 ETH** ($200)  \n  \n```gm    \nShow all token balances  \n```  \n> newline  \n> newline  \n# DeFi Postions  \n  \n---  \n...",
      "tools": [],
      "image": "https://bitte-agent.vercel.app/growthmate.png"
    }
  },
  "paths": {
    "/api/feed": {
      "get": {
        "description": "Get a list of recommendations for the user.",
        "operationId": "getFeed",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Discovery Feed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Posts (actions) ranked from most to least interesting to the user",
                  "items": {
                    "type": "object",
                    "properties": {
                      "post_id": {
                        "type": "number"
                      },
                      "created_at": {
                        "description": "datetime when it was added to our feed",
                        "type": "string"
                      },
                      "topics": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "media": {
                        "type": "object",
                        "description": "Content of the post, could be either text or image"
                      },
                      "link": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "post_id",
                      "created_at",
                      "topics",
                      "media",
                      "link"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/transactions": {
      "get": {
        "description": "Get a list of the users recent activity. Indicates user interests.",
        "operationId": "getTransactions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User transactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Most recent user transactions"
                }
              }
            }
          }
        }
      }
    },
    "/api/networth": {
      "get": {
        "description": "Get users total net worth.",
        "operationId": "getNetworth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Users net worth",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Users net worth"
                }
              }
            }
          }
        }
      }
    },
    "/api/portfolio": {
      "get": {
        "description": "Get users wallet portfolio: a breakdown of their assets by type and value.",
        "operationId": "getPortfolio",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Users portfolio",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Users portfolio"
                }
              }
            }
          }
        }
      }
    }
  }
}
